var workspace   = require("ANYWorkspace");
var __rN        = require("ReactNative");
var BLE         = require("RNBleManager");
var contacts    = require("RNContacts");
var qs          = require("Qs");
var evaluate    = require("Evaluate");
/* d:config, t:callbacks */
module.exports  = function(g, t) {
    var k = g.url || "";
    // invalid format
    if (!k.length || !/^[a-z0-9_-]+:(\/\/)?/i.test(k)) {
        // return error
        t.failed && t.failed("Required address is invalid.");
    // bluetooth
    } else if (/^ble:\/\//i.test(k)) {
        // get splitted path
        var uri = k.substring(6).split('/') || [], args = {};
        // get device id
        var deviceId = uri.shift();
        // get args
        while (uri.length > 0) args[uri.shift()] = uri.shift();
        /*
        // setup bluetooth variables
        var u = new __rN.NativeEventEmitter(__rN.NativeModules.BleManager),
            v = {},
            z = function() {
                // disconnect
                if (/^delete$/i.test(g.method)) {
                    // disconnect targeted device
                    BLE.disconnect(deviceId).then(() => {
                        // Success code
                        console.log('disconnection performed');
                    // failed
                    }).catch(function(b) {
                        // return error
                        t.failed && t.failed(b);
                    });
                // the rest
                } else {
                    // make sure the service and characteristic are specified
                    if (typeof args.services == "undefined" || typeof args.characteristics == "undefined") {
                        // return error
                        t.failed && t.failed({ message: "invalid url" });
                    // specified
                    } else {
                        // connect to targeted device (ble://${id}/services/FFE0/characteristics/FFE1)
                        BLE.connect(deviceId).then(function() {
                            return BLE.retrieveServices(deviceId);
                        // connected
                        }).then(function() {
                            // start notification for listen receiving data
                            return BLE.startNotification(deviceId, args.services, args.characteristics);
                        // connected
                        }).then(function() {
                            // read data
                            if(/^get$/i.test(g.method)) {
                                // get handler name
                                var handlerName = [deviceId, args.services, args.characteristics].join('.');
                                // setup handler container
                                global.ble.read[handlerName] = global.ble.read[handlerName] || [];
                                // register the handler
                                global.ble.read[handlerName].push(t.succeeded);
                            // write data
                            } else {
                                // setup form data container
                                var body = [];
                                // convert data to byte array format
                                for (var d = 0; d < g.body.length; ++d) {
                                    var f = g.body.charCodeAt(d);
                                    body = body.concat([f]);
                                }
                                // no response needed
                                BLE.writeWithoutResponse(deviceId, args.services, args.characteristics, body).then(function() {
                                    t.succeeded && t.succeeded();
                                }).catch(function(b) {
                                    t.failed && t.failed(b);
                                });
                            }
                        // error occurred
                        }).catch(function(b) {
                            // return error
                            t.failed && t.failed(b);
                        });
                    }
                }
            },
            x = function() {
                // no specified device
                if (!deviceId) {
                    // start scanning
                    BLE.scan([], 8, !0);
                } else {
                    // connect to specified device
                    z();
                }
            };
        // start
        global.ble ? x() : BLE.start({ showAlert: !1 }).then(function() {
            global.ble = { read: {} };
            var receivingBuf = "", receivingTimer = null;
            // device disconnection handler
            u.addListener("BleManagerDisconnectPeripheral", function(a) {
                console.log("device: ",a,"disconnected");
                // callback
                t.succeeded && t.succeeded(a);
            });
            // scanning
            u.addListener("BleManagerDiscoverPeripheral", function(device) {
                // setup device
                device = device || {};
                // valid device
                "undefined" != typeof device.name && (v[device.id] = device);
            });
            // add stop handler
            u.addListener("BleManagerStopScan",function() {
                // setup device container
                var devices = [];
                // append discovered device
                for (var d in v) devices.push(v[d]);
                // callback
                t.succeeded && t.succeeded(devices);
            });
            // received data handler
            u.addListener('BleManagerDidUpdateValueForCharacteristic', function(response) {
                clearTimeout(receivingTimer);
                receivingTimer = setTimeout(function() {
                    receivingTimer = clearTimeout(receivingTimer);
                    // setup data container
                    var data = null;
                    // parse received data
                    try { data = JSON.parse(receivingBuf) } catch(e) { data = receivingBuf }
                    // get handler name
                    var handlerName = [response.peripheral, response.service, response.characteristic].join('.');
                    // callback
                    for (var idx in (global.ble.read[handlerName] || [])) global.ble.read[handlerName][idx](data);
                    // clear buffer
                    receivingBuf = "";
                }, 750);
                // get value
                var value = (response || {}).value || [];
                // parse value
                while (value.length > 0) {
                    var hex = value.splice(0, 2);
                    receivingBuf += String.fromCharCode(parseInt(String.fromCharCode(hex[0]) + String.fromCharCode(hex[1]), 16));
                }
            });
            // setup bluetooth
            x();
        });
        */
    // web socket
    } else if (/^wss?:\/\//i.test(k)) {

    // contacts
    } else if (/^contacts:\/\//i.test(k)) {
        contacts.checkPermission(function(pmErr, permission) {
            if (permission === 'authorized') {
                // read contacts
                if (/^get$/i.test(g.method)) {
                    contacts.getAll(function(err, contacts) {
                        // callback type
                        if (err) {
                            // callback
                            t.failed && t.failed(err.message);
                        } else {
                            // get address
                            var uri = (k.substring(11) || "").split("/").filter(function(n) { return n });
                            // get all : get specified
                            t.succeeded && t.succeeded(!uri.length ? contacts : evaluate("${" + uri.join(".") + "}", contacts));
                        }
                    });
                // add contact
                } else if (/^post$/i.test(g.method)) {

                }
            } else {
                t.failed && t.failed((pmErr || {}).message);
            }
        });
    
    } else if (/^clipboard:\/\//i.test(k)) {
        // get info
        if (/^get$/i.test(g.method)) {
            __rN.Clipboard.getString().then(function(text) {
                // callback
                t.succeeded && t.succeeded(text);
            }).catch(function(e) {
                // callback
                t.failed && t.failed(e.message);
            });
        } else {
            // get text
            var text = /^delete$/i.test(g.method) ? "" : (k.substring(12) || "");
            // set text
            __rN.Clipboard.setString(text);
            // callback
            t.succeeded && t.succeeded();
        }






























    // local storage
    } else if (/^db:\/\//i.test(k)) {
        var appId = 'APP_' + ((global.__project || {}).id || "") + ":";
        // get address
        var uri = (k.substring(5) || "").split("/").filter(function(n){return n});
        // fetch app data for reference
        __rN.AsyncStorage.getItem(appId, function(accessErr, result) {
            // callback type
            if (accessErr) {
                // callback
                t.failed && t.failed(accessErr.message);
            } else {
                // setup data container
                var data = null;
                // parse result
                try { data = JSON.parse(result) } catch(e) { data = null } finally { data = data || {} }
                // insert/update/delete
                if (/^post|put|delete$/i.test(g.method)) {
                    // process form data
                    var formData = (/^application\/x-www-form-urlencoded$/i.test(g.headers['Content-Type']) ? g.body : qs.stringify(JSON.parse(g.body))).split("&").filter(function(n){return n});
                    // delete data
                    if (/^delete$/i.test(g.method)) {
                        // setup form data
                        formData = qs.parse(uri.shift() + (uri.length ? '[' + uri.join('][') + ']' : '') + '=');
                    // insert or update
                    } else {
                        // get exactly data
                        if (uri.length) data = evaluate("${" + uri.join(".") + "}", data);
                        // make data to be an array
                        if (/^post$/i.test(g.method)) {
                            if (!Array.isArray(data)) {
                                data = typeof data == "object" ? [data] : [];
                            }
                        }
                        // get prefix
                        var prefix = uri.shift();
                        // get index
                        var idx = Array.isArray(data) ? data.length : 0;
                        // append it for creating record
                        if (/^post$/i.test(g.method)) {
                            for (var i in formData) {
                                // get separator
                                var sptr = formData[i].indexOf('['), isStr = sptr < 0;
                                // not array or object
                                if (isStr) sptr = formData[i].indexOf('=');
                                // get key
                                var key = formData[i].substr(0, sptr);
                                // get suffix
                                formData[i] = formData[i].substring(sptr + 1);
                                // update form data
                                formData[i] = idx + '[' + key + ']' + (isStr ? '=' : '[') + formData[i];
                            }
                        }
                        // combine form data and data
                        formData = qs.stringify(data).split('&').filter(function(f){return f}).concat(formData);
                        // create data container
                        data = {};
                        // parse data
                        for (var i in formData) {
                            // get separator
                            var sptr = formData[i].lastIndexOf('=');
                            // get value
                            var value = formData[i].substring(sptr + 1);
                            // get key
                            formData[i] = decodeURIComponent(formData[i].substr(0, sptr));
                            // get separator again for getting prefix
                            sptr = formData[i].indexOf('[');
                            // get prefix
                            var key = formData[i].substr(0, sptr);
                            // get real key
                            formData[i] = formData[i].substring(sptr + 1);
                            // combine key
                            key = key.length ? '[' + key + '][' + formData[i] : '[' + formData[i] + ']';
                            // get url
                            var url = prefix + (uri.length ? '[' + uri.join('][') + ']' : '') + key;
                            // update form data value
                            data[url] = [url, value].filter(function(v){return v}).join('=');
                        }
                        formData = [];
                        for (var field in data) formData.push(data[field]);
                        // convert to json format
                        formData = qs.parse(formData.join("&"));
                    }
                    // save data
                    __rN.AsyncStorage.mergeItem(appId, JSON.stringify(formData), function() {
                        // get all : get specified
                        t.succeeded && t.succeeded(formData);
                    });
                // read
                } else {
                    // url pointer exists
                    if (uri.length) {
                        // get exactly data
                        data = evaluate('${' + uri.join(".") + '}', data);
                    }
                    // get all : get specified
                    t.succeeded && t.succeeded(data);
                }
            }
        });
    // components
    } else if (/^app:\/\//i.test(k)) {
        // get address
        var uri = (k.substring(6) || "").split("/").filter(function(n){return n});
        console.log("[network] check caller:", typeof module.exports);
        // get caller
        var caller = module.exports.caller.arguments[0], parent = caller.__caller;
        // setup head container
        var heads = [];
        // get heads
        while(parent) {
            // container exists
            if (workspace.tree[parent.__id].aliases) {
                // append head id to container
                heads.unshift(parent.__id);
            }
            parent = parent.__caller;
        }
        // get alias
        var alias = uri.shift();
        // upper level
        while (/^\.\.$/i.test(alias||"")) {
            heads.pop();
            alias = uri.shift();
        }
        // get head id
        var headId = alias && heads.length ? heads.pop() : null;
        // get targeted id
        var targetedId = headId ? workspace.tree[headId].aliases[alias] : null;
        // lower level
        while (targetedId && (uri[0]||"") != "style" && (workspace.tree[targetedId].aliases||{})[uri[0]||""]) {
            alias = uri.shift();
            targetedId = workspace.tree[targetedId].aliases[alias];
        }
        // valid url
        if (targetedId) {
            // get component type
            var type = workspace.views[targetedId] ? "view" : "node";
            // get closest view
            var closestView = workspace.tree[targetedId].dom();
            // get info
            if (/^get$/i.test(g.method)) {
                // get instance
                var instance = workspace.tree[targetedId].instance;
                // get data
                var data = instance.data();
                // node
                if (/^node$/i.test(type)) {
                    // callback with props
                    t.succeeded && t.succeeded(data);
                // view
                } else {
                    // get info
                    __rN.UIManager.measure(__rN.findNodeHandle(closestView), function(x, y, width, height, pageX, pageY) {
                        // append view info to data container
                        data.frame = {
                            x       : x,
                            y       : y,
                            width   : width,
                            height  : height
                        };
                        // callback with info
                        t.succeeded && t.succeeded(data);
                    });
                }
            // reload or start new action
            } else if (/^post|put$/i.test(g.method)) {
                // process form data
                var props = /^application\/x-www-form-urlencoded$/i.test(g.headers['Content-Type']) ? qs.parse(g.body) : JSON.parse(g.body);
                // reload dom
                if (/^put$/i.test(g.method) && /^view$/i.test(type) && closestView) {
                    // get instance
                    var instance = workspace.tree[targetedId].instance;
                    // update caller
                    caller = instance.__caller;
                    // update style?
                    if (/^style$/i.test(uri[0]||"") || (!isNaN(parseInt(uri[0])) && /^style$/i.test(uri[1]||""))) {
                        var style = props;
                        // clear prop data container for storing style only
                        props = {};
                        props.style = /^put$/i.test(g.method) ? JSON.parse(JSON.stringify(closestView.state.style || {})) : {};
                        for (var key in style) {
                            var value = parseFloat(style[key]);
                            props.style[key] = isNaN(value) ? style[key] : value;
                        }
                    }
                    // view exists
                    if (closestView.setState) {
                        // update view
                        closestView.setState(props, function() {
                            this.active();
                            t.succeeded && t.succeeded();
                        });
                    }
                // new action
                } else {
                    // get class
                    var cls = workspace.tree[targetedId].class;
                    // get instance
                    var instance = workspace.tree[targetedId].instance;
                    // get original props
                    var oriProps = JSON.parse(JSON.stringify(instance.__props));
                    // append new props to original prop data container
                    for (var key in props) oriProps[key] = props[key];
                    // update node
                    if (/^put$/i.test(g.method)) {
                        // release the original node
                        instance.release();
                        // update caller
                        caller = instance.__caller;
                    }
                    // reload
                    new (Function.prototype.bind.call(cls, null, caller, oriProps));
                    // callback
                    t.succeeded && t.succeeded();
                }
            // delete node
            } else if (/^delete$/i.test(g.method)) {

            }
        }
    // http by default
    } else if (/^https?:\/\//i.test(k)) {
        // remove url from config
        delete g.url;
        // remove body for get method
        if (/^get$/i.test(g.method)) delete g.body;
        // send request to related server
        fetch(k, g).then(function(a) {
            b = null;
            try { b = JSON.parse(a._bodyInit) } catch(b) { b = a._bodyInit }
            // callback type
            var cbType = a.status && a.status <= 399 ? 'succeeded' : 'failed';
            // callback
            t[cbType] && t[cbType](b);
        });
    // use open url
    } else {
        // validate
        __rN.Linking.canOpenURL(k).then(function(supported) {
            if (!supported) {
                t.failed && t.failed(404);
            } else {
                // read
                if (/^get$/i.test(g.method)) {
                    t.succeeded && t.succeeded();
                // the rest
                } else {
                    // open url
                    __rN.Linking.openURL(k).catch(function(e) {
                        t.failed && t.failed(e.message);
                    });
                }
            }
        }).catch(function(e) {
            t.failed && t.failed(e.message);
        });
    }
};