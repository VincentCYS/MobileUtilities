var workspace   = require("ANYWorkspace");
var __rN        = require("ReactNative");
var Base64      = require("Base64");
var BLE         = require("BLE");
/* d:instance, t:callbacks */
module.exports  = function(d, t) {
    var k = d.__props.url || "";
    var g = {
        method:{READ:"GET",CREATE:"POST",UPDATE:"PUT",DELETE:"DELETE"}[(d.__props.type||"GET").toUpperCase()],
        headers:{
            "Content-Type":{
                json:"application/json",
                querystring:"application/x-www-form-urlencoded"
            }[(d.__props.format||"querystring").toLowerCase()]
        }
    };
    // got url
    if (0 < k.length) {
        /* bluetooth */
        if(/^ble?:\/\//i.test(k)) {
            // get splitted path
            var uri = k.substring(6).split('/') || [], args = {};
            // get device id
            var deviceId = uri.shift();
            // get args
            while (uri.length > 0) args[uri.shift()] = uri.shift();
            // setup bluetooth variables
            var u = new __rN.NativeEventEmitter(__rN.NativeModules.BleManager),
                w = function(d) {
                    console.log("[ble] show data ", d);
                },
                z = function() {
                    // disconnect
                    if (/^delete$/i.test(g.method)) {
                        // disconnect targeted device
                        BLE.disconnect(deviceId).then(() => {
                            // Success code
                            console.log('disconnection performed');
                        // failed
                        }).catch(function(b) {
                            // return error
                            t.failed(b);
                        });
                    // the rest
                    } else {
                        // make sure the service and characteristic are specified
                        if (typeof args.services == "undefined" || typeof args.characteristics == "undefined") {
                            // return error
                            t.failed({ message: "invalid url" });
                        // specified
                        } else {
                            // connect to targeted device (ble://${id}/services/FFE0/characteristics/FFE1)
                            BLE.connect(deviceId).then(function() {
                                console.log("[ble] device " + deviceId + " connected.");
                                return BLE.retrieveServices(deviceId);
                            // connected
                            }).then(function() {
                                console.log("[ble] start notification, ", deviceId, args.services, args.characteristics);
                                // start notification for listen receiving data
                                return BLE.startNotification(deviceId, args.services, args.characteristics);
                            // connected
                            }).then(function() {
                                // read data
                                if(/^get$/i.test(g.method)) {
                                    // register the handler
                                    console.log("[ble] waiting for connection......");
                                // write data
                                } else {
                                    // setup form data container
                                    var body = [];
                                    // convert data to byte array format
                                    for (var d = 0; d < g.body.length; ++d) {
                                        var f = g.body.charCodeAt(d);
                                        body = body.concat([f]);
                                    }
                                    // no response needed
                                    BLE.writeWithoutResponse(deviceId, args.services, args.characteristics, body).then(function() {
                                        w();
                                    }).catch(function(b) {
                                        t.failed(b);
                                    });
                                }
                            // error occurred
                            }).catch(function(b) {
                                // return error
                                t.failed(b);
                            });
                        }
                    }
                },
                x = function() {
                    // no specified device
                    if (!deviceId) {
                        // start scanning
                        BLE.scan([], 8, !0);
                    } else {
                        // connect to specified device
                        z();
                    }
                };
            // start
            global.ble? x() : BLE.start({ showAlert: !1 }).then(function() {
                global.ble = {};
                console.log("[ble] started.");
                // device disconnection handler
                u.addListener("BleManagerDisconnectPeripheral", function(a) {
                    console.log("device: ",a,"disconnected");
                });
                // scanning
                u.addListener("BleManagerDiscoverPeripheral", function(device) {
                    // setup device
                    device = device || {};
                    // valid device
                    "undefined" != typeof device.name && (v[device.id] = device);
                });
                // add stop handler
                u.addListener("BleManagerStopScan",function() {
                    // setup device container
                    var devices = [];
                    // append discovered device
                    for (var d in v) devices.push(v[d]);
                    // callback
                    w(devices);
                });
                // received data handler
                u.addListener('BleManagerDidUpdateValueForCharacteristic', function(body, peripheral, characteristic, service) {
                    console.log("[ble] received raw data from ble device:", data);
                    var data = "";
                    // convert byte array to string
                    for (var i = 0; i < body.length; i++) data += String.fromCharCode(parseInt(body[i], 2));
                    console.log("[ble] received converted data from ble device:", data);
                });
                // setup bluetooth
                x();
            });
        }
    }
};